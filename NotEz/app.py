import sys
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLineEdit, QTextEdit, QPushButton, QListWidget, \
    QComboBox, QMenu, QLabel, QMessageBox, QHBoxLayout, QDialog, QDialogButtonBox
from PyQt5.QtCore import Qt, QPoint
from db import init_db, add_note_to_db, get_all_notes, get_note_content, delete_note_from_db, update_note_content, \
    toggle_favorite, toggle_pin
from PyQt5.QtGui import QIcon,QFont


class NoteEditor(QWidget):
    #–≠–∫—Ä–∞–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫
    def __init__(self, note_id=None, on_save_callback=None, is_dark_theme=False):
        super().__init__()
        self.note_id = note_id
        self.on_save_callback = on_save_callback  # Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
        self.is_dark_theme = is_dark_theme  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        self.setWindowTitle("Edit the note")
        self.setFixedSize(400, 300)  # —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

        # –ø–æ–ª–µ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–º–µ—Ç–∫–∏
        self.title_input = QLineEdit(self)
        self.title_input.setPlaceholderText("Title")

        # –ø–æ–ª–µ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∑–∞–º–µ—Ç–∫–∏
        self.content_input = QTextEdit(self)

        # –ø–æ–ª–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        self.category_input = QComboBox(self)
        self.category_input.addItems(["All", "Work", "Ideas", "Favorite"])  # –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        # –∫–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏
        self.save_button = QPushButton("Save", self)
        self.save_button.clicked.connect(self.save_note)

        # —Å–æ–∑–¥–∞–µ–º layout
        layout = QVBoxLayout()
        layout.addWidget(self.title_input)
        layout.addWidget(self.content_input)
        layout.addWidget(QLabel("Category:"))  # –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –¥–ª—è –ø–æ–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        layout.addWidget(self.category_input)
        layout.addWidget(self.save_button)

        self.setLayout(layout)

        if self.note_id:
            self.load_note()

        self.apply_theme()  # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def apply_theme(self):
        # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É –∑–∞–º–µ—Ç–æ–∫
        if self.is_dark_theme:
            self.setStyleSheet("background-color: #444444; color: white;")
            self.title_input.setStyleSheet("background-color: #555555; color: white;")
            self.content_input.setStyleSheet("background-color: #555555; color: white;")
            self.save_button.setStyleSheet("background-color: #555555; color: white;")
        else:
            self.setStyleSheet("background-color: white; color: black;")
            self.title_input.setStyleSheet("background-color: white; color: black;")
            self.content_input.setStyleSheet("background-color: white; color: black;")
            self.save_button.setStyleSheet("background-color: #DDDDDD; color: black;")

    def load_note(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ –µ—ë ID
        title, content, category = get_note_content(self.note_id)
        self.title_input.setText(title)
        self.content_input.setPlainText(content)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
        self.category_input.setCurrentText(category)  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é

    def save_note(self):
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        title = self.title_input.text().strip()
        content = self.content_input.toPlainText().strip()
        category = self.category_input.currentText()  # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é

        # –µ—Å–ª–∏ –µ—Å—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∞ —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
        if '‚≠ê' in title:
            category = "Favorite"

        if not title:
            QMessageBox.warning(self, "Error", "Name the note!")
            return

        try:
            if self.note_id:
                # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–º–µ—Ç–∫—É
                update_note_content(self.note_id, title, content, category)  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
            else:
                # —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–º–µ—Ç–∫—É
                add_note_to_db(title, content, category)  # —Å–æ–∑–¥–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π

            if self.on_save_callback:
                self.on_save_callback()  # –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
            self.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–æ—Ä –∑–∞–º–µ—Ç–æ–∫
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Could not save the note :( : {e}")


class CategoryDialog(QDialog):
    # –¥–∏–∞–ª–æ–≥ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    def __init__(self, categories, on_select_callback, is_dark_theme=False):
        super().__init__()
        self.setWindowTitle("Choose the category")
        self.setFixedSize(200, 150)

        self.on_select_callback = on_select_callback
        self.is_dark_theme = is_dark_theme  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–º—ã

        layout = QVBoxLayout()

        self.category_list = QListWidget(self)
        self.category_list.addItems(categories)
        self.category_list.itemClicked.connect(self.select_category)

        layout.addWidget(self.category_list)

        self.setLayout(layout)
        self.apply_theme()  # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    def apply_theme(self):
        if self.is_dark_theme:
            self.setStyleSheet("background-color: #444444; color: white;")
            self.category_list.setStyleSheet("background-color: #555555; color: white;")
        else:
            self.setStyleSheet("background-color: white; color: black;")
            self.category_list.setStyleSheet("background-color: white; color: black;")

    def select_category(self, item):
        # –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–∏–∞–ª–æ–≥–∞
        selected_category = item.text()
        self.on_select_callback(selected_category)  # –≤—ã–∑—ã–≤–∞–µ–º callback —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
        self.close()


class NotesApp(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("NotEZ")
        self.setFixedSize(600, 400)  # –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞

        # –°–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
        self.notes_list = QListWidget(self)
        self.notes_list.itemClicked.connect(self.open_note_editor)
        self.notes_list.setContextMenuPolicy(Qt.CustomContextMenu)
        self.notes_list.customContextMenuRequested.connect(self.show_context_menu)

        # –ø–æ–ª–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫
        self.search_input = QLineEdit(self)
        self.search_input.setPlaceholderText("Search a note...")
        self.search_input.textChanged.connect(self.filter_notes)  # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞

        # –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏
        self.new_note_button = QPushButton("‚ûï New Note", self)
        self.new_note_button.clicked.connect(self.create_new_note)

        # —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        self.theme_toggle_button = QPushButton("üåô", self)  # –ù–∞—á–Ω–µ–º —Å —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.theme_toggle_button.clicked.connect(self.toggle_theme)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.category_button = QPushButton("‚öôÔ∏è", self)  # –®–µ—Å—Ç–µ—Ä–µ–Ω–∫–∞
        self.category_button.clicked.connect(self.open_category_dialog)

        # –°–æ–∑–¥–∞–µ–º layout
        bottom_layout = QHBoxLayout()
        bottom_layout.addWidget(self.new_note_button)
        bottom_layout.addWidget(self.search_input)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        bottom_layout.addWidget(self.theme_toggle_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
        bottom_layout.addWidget(self.category_button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        layout = QVBoxLayout()
        layout.addWidget(self.notes_list)
        layout.addLayout(bottom_layout)

        self.setLayout(layout)

        self.is_dark_theme = False  # –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–º—ã
        self.apply_theme()

        init_db()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.load_notes()

    def apply_theme(self):
        if self.is_dark_theme:
            self.setStyleSheet("background-color: #2E2E2E; color: white;")
            self.notes_list.setStyleSheet("background-color: #444444; color: white;")
            self.search_input.setStyleSheet("background-color: #555555; color: white;")
            self.new_note_button.setStyleSheet("background-color: #444444; color: white;")
            self.theme_toggle_button.setStyleSheet("background-color: #444444; color: white;")
            self.category_button.setStyleSheet("background-color: #444444; color: white;")
            self.theme_toggle_button.setText("‚òÄÔ∏è")  # –ò–∑–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Å–æ–ª–Ω—Ü–µ
        else:
            self.setStyleSheet("background-color: white; color: black;")
            self.notes_list.setStyleSheet("background-color: white; color: black;")
            self.search_input.setStyleSheet("background-color: white; color: black;")
            self.new_note_button.setStyleSheet("background-color: #DDDDDD; color: black;")
            self.theme_toggle_button.setStyleSheet("background-color: #DDDDDD; color: black;")
            self.category_button.setStyleSheet("background-color: #DDDDDD; color: black;")
            self.theme_toggle_button.setText("üåô")  # –∏–∑–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ –ª—É–Ω—É

    def toggle_theme(self):
        # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        self.is_dark_theme = not self.is_dark_theme
        self.apply_theme()

        # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä –æ—Ç–∫—Ä—ã—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
        if hasattr(self, 'note_editor') and self.note_editor.isVisible():
            self.note_editor.is_dark_theme = self.is_dark_theme  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã
            self.note_editor.apply_theme()  # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ —Ä–µ–¥–∞–∫—Ç–æ—Ä—É

    def load_notes(self, category_filter=None):
        # –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.notes_list.clear()
        self.all_notes = get_all_notes()

        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–º–µ—Ç–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–¥–∞–Ω–∞
        if category_filter and category_filter != "All":
            self.all_notes = [note for note in self.all_notes if
                              note[4] == category_filter]  # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

        # —Ä–∞–∑–¥–µ–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –Ω–∞ –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∏ –æ–±—ã—á–Ω—ã–µ
        pinned_notes = [note for note in self.all_notes if note[5]]  # –ø—Ä–æ–≤–µ—Ä—è–µ–º is_pinned
        regular_notes = [note for note in self.all_notes if not note[5]]

        # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ —Å–Ω–∞—á–∞–ª–∞
        for note in pinned_notes:
            note_id, title, content, favorite, category, is_pinned = note
            note_text = f"{note_id}: {title} üìå"  # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è
            self.notes_list.addItem(note_text)

        # –∑–∞—Ç–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
        for note in regular_notes:
            note_id, title, content, favorite, category, is_pinned = note
            note_text = f"{note_id}: {title} {'‚≠ê' if favorite else ''}"
            self.notes_list.addItem(note_text)

    def filter_notes(self):
        search_text = self.search_input.text().lower()
        self.notes_list.clear()

        print("All notes:", self.all_notes)  # –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if not self.all_notes:
            return

        for note in self.all_notes:
            try:
                note_id, title, content, favorite, category , is_pinned = note
                if search_text in title.lower() or search_text in content.lower():
                    note_text = f"{note_id}: {title} {'‚≠ê' if favorite else ''}"
                    self.notes_list.addItem(note_text)
            except Exception as e:
                print("Error:", e)  # –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    def open_note_editor(self, item):
        try:
            note_id = int(item.text().split(":")[0])  # –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏
            self.note_editor = NoteEditor(note_id, self.load_notes, self.is_dark_theme)  # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–º—ã
            self.note_editor.show()
        except Exception as e:
            QMessageBox.critical(self, "Error", f"Can not open the note: {e}")

    def create_new_note(self):
        self.note_editor = NoteEditor(on_save_callback=self.load_notes)  # –ø–µ—Ä–µ–¥–∞–µ–º callback
        self.note_editor.show()

    def show_context_menu(self, pos):
        # –¥–ª—è –ø—Ä–∞–≤–æ–π –º—ã—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏
        menu = QMenu(self)
        delete_action = menu.addAction("Delete the note")
        toggle_favorite_action = menu.addAction("Favorite")
        toggle_pin_action = menu.addAction("Pin/Unpin")  # –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ

        action = menu.exec_(self.notes_list.mapToGlobal(pos))

        if action == delete_action:
            self.delete_note()
        elif action == toggle_favorite_action:
            self.toggle_favorite()
        elif action == toggle_pin_action:
            self.toggle_pin()  # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è

    def toggle_pin(self):
        # –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –∑–∞–∫—Ä–µ–ø–∞
        current_item = self.notes_list.currentItem()
        if current_item:
            note_id = int(current_item.text().split(":")[0])  # –ø–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏
            try:
                toggle_pin(note_id)  # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                self.load_notes()  # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫
            except Exception as e:
                QMessageBox.critical(self, "Error", f"Can not pin the note: {e}")

    def delete_note(self):
        # —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
        current_item = self.notes_list.currentItem()
        if current_item:
            note_id = int(current_item.text().split(":")[0])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏
            delete_note_from_db(note_id)
            self.load_notes()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫

    def toggle_favorite(self):
        # –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        current_item = self.notes_list.currentItem()
        if current_item:
            note_id = int(current_item.text().split(":")[0])  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–º–µ—Ç–∫–∏
            toggle_favorite(note_id)
            self.load_notes()  # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫

    def open_category_dialog(self):
        dialog = CategoryDialog(["All", "Work", "Ideas", "Favorite"], self.select_category, self.is_dark_theme)
        dialog.exec_()

    def select_category(self, category):
        # –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        self.load_notes(category_filter=category)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º


if __name__ == "__main__":
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon("notez_icon.jpg"))  #icon
    font = QFont("Verdana", 10)   #font
    app.setFont(font)
    window = NotesApp()
    window.show()
    sys.exit(app.exec_())
